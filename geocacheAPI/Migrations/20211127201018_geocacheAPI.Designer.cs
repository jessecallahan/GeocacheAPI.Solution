// <auto-generated />
using System;
using GeocacheAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace geocacheAPI.Migrations
{
    [DbContext(typeof(GeocacheAPIContext))]
    [Migration("20211127201018_geocacheAPI")]
    partial class geocacheAPI
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("GeocacheAPI.Models.Geocache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Lng")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Geocaches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Lat = 47.606200000000001,
                            Lng = 122.3321,
                            Name = "Treasure Island"
                        },
                        new
                        {
                            Id = 2,
                            Lat = 47.606200000000001,
                            Lng = 122.3321,
                            Name = "Magic Mountain"
                        },
                        new
                        {
                            Id = 3,
                            Lat = 47.606200000000001,
                            Lng = 122.3321,
                            Name = "Discovery Park"
                        });
                });

            modelBuilder.Entity("GeocacheAPI.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeocacheId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeocacheId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeocacheId = 1,
                            IsActive = true,
                            Name = "Coins",
                            StartDate = new DateTime(2021, 11, 27, 12, 10, 16, 226, DateTimeKind.Local).AddTicks(3960)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeocacheId = 1,
                            IsActive = true,
                            Name = "Jewelry",
                            StartDate = new DateTime(2021, 11, 27, 12, 10, 16, 393, DateTimeKind.Local).AddTicks(2320)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeocacheId = 1,
                            IsActive = true,
                            Name = "Trading Stones",
                            StartDate = new DateTime(2021, 11, 27, 12, 10, 16, 393, DateTimeKind.Local).AddTicks(2400)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeocacheId = 2,
                            IsActive = true,
                            Name = "Compass",
                            StartDate = new DateTime(2021, 11, 27, 12, 10, 16, 393, DateTimeKind.Local).AddTicks(2410)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeocacheId = 2,
                            IsActive = true,
                            Name = "Poem",
                            StartDate = new DateTime(2021, 11, 27, 12, 10, 16, 393, DateTimeKind.Local).AddTicks(2410)
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2021, 11, 27, 12, 10, 16, 393, DateTimeKind.Local).AddTicks(2420),
                            GeocacheId = 3,
                            IsActive = false,
                            Name = "Stamps",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GeocacheAPI.Models.Item", b =>
                {
                    b.HasOne("GeocacheAPI.Models.Geocache", "Geocache")
                        .WithMany("Items")
                        .HasForeignKey("GeocacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
